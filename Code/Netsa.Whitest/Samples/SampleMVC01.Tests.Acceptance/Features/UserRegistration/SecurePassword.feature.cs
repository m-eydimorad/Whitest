// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SampleMVC01.Tests.Acceptance.Features.UserRegistration
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ProvidingASecurePasswordWhenRegisteringFeature : Xunit.IClassFixture<ProvidingASecurePasswordWhenRegisteringFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "SecurePassword.feature"
#line hidden
        
        public ProvidingASecurePasswordWhenRegisteringFeature(ProvidingASecurePasswordWhenRegisteringFeature.FixtureData fixtureData, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Providing a secure password when registering", "\tIn order to avoid hackers compromising member accounts\r\n\tAs the systems administ" +
                    "rator\r\n\tI want new members to provide a secure password when they register", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Password is too short")]
        [Xunit.TraitAttribute("FeatureTitle", "Providing a secure password when registering")]
        [Xunit.TraitAttribute("Description", "Password is too short")]
        public virtual void PasswordIsTooShort()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Password is too short", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table1.AddRow(new string[] {
                        "Email",
                        "b@b.com"});
            table1.AddRow(new string[] {
                        "Password",
                        "12345"});
            table1.AddRow(new string[] {
                        "ConfirmPassword",
                        "12345"});
#line 7
 testRunner.Given("I want to register with the following details :", ((string)(null)), table1, "Given ");
#line 12
 testRunner.When("I press submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 13
 testRunner.Then("I should be inform that password is too short", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Password requires digit")]
        [Xunit.TraitAttribute("FeatureTitle", "Providing a secure password when registering")]
        [Xunit.TraitAttribute("Description", "Password requires digit")]
        public virtual void PasswordRequiresDigit()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Password requires digit", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Key",
                        "Value"});
            table2.AddRow(new string[] {
                        "Email",
                        "c@c.com"});
            table2.AddRow(new string[] {
                        "Password",
                        "abcdefg"});
            table2.AddRow(new string[] {
                        "ConfirmPassword",
                        "abcdefg"});
#line 17
 testRunner.Given("I want to register with the following details :", ((string)(null)), table2, "Given ");
#line 22
 testRunner.When("I press submit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 23
 testRunner.Then("I should be inform that password should have at least one digit", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ProvidingASecurePasswordWhenRegisteringFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ProvidingASecurePasswordWhenRegisteringFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
